#!/usr/bin/env coffee

ChildProcess = require('child_process')
Q = require('q')
HTTP = require('q-io/http')
FS = require('q-io/fs')

process.chdir(__dirname)

port = ''
start = null
first = null
content = ''
ok = false
server =
	proc: ChildProcess.spawn('./server.coffee')
	start: Q.defer()
	exit: Q.defer()
proxy =
	proc: ChildProcess.spawn('../../repoproxy.js')
	start: Q.defer()
	exit: Q.defer()

server.proc.stdout.on 'data', (data) ->
	port = data.toString('utf-8').trim()
	server.start.resolve()
server.proc.stdout.on 'close', -> server.exit.resolve()
proxy.proc.stdout.on 'data', (data) ->
	console.log(data.toString("utf-8").trim())
	proxy.start.resolve()
proxy.proc.stderr.on 'data', (data) ->
	console.log(data.toString("utf-8").trim())
proxy.proc.stdout.on 'close', -> proxy.exit.resolve()

cleanTemp = ->
	FS.isDirectory('temp')
	.then (isDir) ->
		if isDir then FS.removeTree('temp')

cleanTemp().then ->
	Q.all([
		server.start.promise
		proxy.start.promise
	])
.then ->
	start = new Date()
	HTTP.request({
		port: '3142',
		host: '127.0.0.1',
		headers: {
			host: "localhost:#{port}"
		}
		path: '/foo'
	})
.then (response) ->
	response.body.forEach (chunk) ->
		if (!first) then first = new Date() - start
		line = chunk.toString('utf-8')
		content += line
.then ->
	finished = new Date() - start
	console.log("First chunk recieved at #{first}ms")
	console.log("Completed at #{finished}ms")
	contentOk = !(content.match(/^((foo){341}\n){100}$/) is null)
	console.log("Content ok: #{contentOk}")
	# TODO why do we need a threshold for finished?
	ok = first < 200 && finished < 1500 && contentOk
.finally ->
	proxy.proc.kill('SIGTERM')
	server.proc.kill('SIGTERM')


# Once everything's done, exit ungracefully if we found any issues
Q.all([
	server.exit.promise
	proxy.exit.promise
]).then ->
	cleanTemp()
.then ->
	if not ok
		console.log("Not ok")
		process.exit(1)

